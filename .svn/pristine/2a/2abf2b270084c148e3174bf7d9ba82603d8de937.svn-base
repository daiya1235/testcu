package utils;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import page.Page_Waiter1;




public class BrowserDriver  {
	
	public static ChromeDriver dr = null;
	public static Logger log =  LogManager.getLogger(BrowserDriver.class.getName());
	private final String path = "D:/Chrome/Application/Chrome.exe";
	Field[] methods = Page_Waiter1.class.getFields();
	
	public BrowserDriver(String baseUrl) {
		browser();
		this.open(baseUrl);
	
	}
	public BrowserDriver() {
	
	}

	
	/**
	 *  打开指定的Url地址
	 *  @param url 网址
	 * */
	public void open(String url) {
		try {
			log.info("open url: "+url);
			dr.get(url);
		} catch (Exception e) {
			log.error("open error"+e);
			e.printStackTrace();
		}
	}
	
	/**
	 *  初始化浏览器
	 * 
	 * */
	public void browser() {
		System.setProperty("webdriver.chrome.driver", "./libs/chromedriver.exe");
		ChromeOptions options = new ChromeOptions();
		options.setBinary(path);
		dr = new ChromeDriver(options);
		dr.manage().window().maximize();
		dr.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
		
	}
	
	/**
	 *  勾选checkBox
	 *  @param eleName Xpath 元素 
	 * 
	 * */
	public void check(String eleName) {
		log.info("**Check**"+eleName);
		WebElement ele = null;
		try {
			ele = dr.findElementByXPath(eleName);
		} catch (Exception e) {
			log.error("The element is not find!" +"\r\n" + e);
		}
		if (!ele.isSelected()) {
			ele.click();
		} else {
			log.error(eleName + "had been selected!");
            return;
		}
	}
	
	/**
	 *  关闭浏览器当前的tab
	 * 
	 * 
	 * */
	public void closeTab() {
		new Actions(dr).keyDown(Keys.CONTROL).sendKeys("w").perform();
	}
	
	/**
	 * 切换到默认的Frame
	 */
	public void switchToDefaultFrame() {
		try {
			log.debug("切换到默认的Frame");
			dr.switchTo().defaultContent();
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
	}
	
	/**
	 * 设置页面等待的时间
	 */
	public void waitTime(long time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
			log.error("Wait time:" +"\r\n"+ e);
			e.printStackTrace();
		}
	}

	/**
	 * 点击页面上的元素
	 * @param xpath元素
	 * */
	public void click(String elementName) { 
		for (Field f : methods) {
			try {
				if(f.get(methods).equals(elementName)) {log.info("    " + f.getName());break;}
			} catch (IllegalArgumentException | IllegalAccessException e) {
				log.error("不能找到元素对应的变量"+e);
			}	
		}
		waitTime(1000);
		try {
			click("xpath", elementName);
		} catch (Exception e) {
			log.error(elementName + "not find!!" + "\r\n" + e);
			Assert.fail();
		}
	}
	
	public  void click(String method,String elementName) throws Exception{
		switch (method) {
		case "id":
			dr.findElement(By.id(elementName)).click();;
			break;
		case "xpath":
			dr.findElement(By.xpath(elementName)).click();;
			break;
		case "cssSelector":
			dr.findElement(By.cssSelector(elementName)).click();;
			break;
		default:
			break;
		}
		
	}
	
	
	public void click2(String elementName) {
		waitTime(800);
		try {
			new Actions(dr).moveToElement(dr.findElementByXPath(elementName)).click().perform();
		} catch (Exception e) {
			log.error(elementName + "not find!!" + "\r\n" + e);
			Assert.fail();
		}
	}
	
	/**
	 *  默认最大等待15s点击页面上的元素
	 * 
	 * */
	public void clickAndWait(String element) {
		if (waitForElementClick(element,15)) {
			try {
				dr.findElementByXPath(element).click();
			} catch (Exception e) {
				log.error(element + "not find!!" + "\r\n" + e);
				Assert.fail();
			}
		} else {
			log.error("The element is not visable or not load!");
			Assert.fail();
		}
	}
	
	/** 
	  * 判断元素在指定时间是否可以点击
	  * @param by 元素 
	  * @param seconds 指定秒数 
	  * @return 出现返回true 否则返回false 
	  */  
	 public boolean waitForElementClick(String element, int seconds) {  
	     try {  
	         new WebDriverWait(dr, seconds).until(ExpectedConditions.elementToBeClickable(By.xpath(element)));  
	         //new WebDriverWait(dr, seconds).until(ExpectedConditions.elementToBeClickable(By.xpath(element)));
	         return true;  
	     } catch (Exception e) { 
	    	 log.error("we cannot locat the element in specified seconds! " + "\r\n" +e);
	         return false;  
	     }  
	 }  
	
	/**
	 * 输入数据到页面上的元素
	 * @param xpath元素
	 * */
	public void type(String elementName,String text) {
		try {
			 for (Field f : methods) {
					if(f.get(methods).equals(elementName)) {log.info("    " + f.getName()+ "  =  " + text);break;}
				}
			 dr.findElementByXPath(elementName).clear();
			 dr.findElementByXPath(elementName).sendKeys(text);
		} catch (Exception e) {
			log.error("type:"+text+" "+e);
		}
	}
	
	/**
	 * 清除输入框里面的内容
	 * @param xpath元素
	 * */
	public void clearText(String elementName[]) {
		for (String str : elementName) {
			try {
				for (Field f : methods) {
					if(f.get(methods).equals(elementName)) {log.info("    " + f.getName());break;}
				}
				dr.findElementByXPath(str).clear();
			} catch (Exception e) {
				log.error("Error:-->Clear: "+e);
			}
		}
	}
	
	/**
	 * 在页面上打开一个新的tab
	 * @param url 网址
	 * */
	public void openTab(String url) {
		log.debug("Open a Tab with a Url:" + url );
		try {
			Actions action = new Actions(dr);
			action.sendKeys(Keys.CONTROL+"t").perform();
			dr.get(url);
			
		} catch (Exception e) {
			log.error("打开新的tab错误："+e);
			e.printStackTrace();
		}
	}
	
	/**
	 *  根据xpath元素改变页面Frame
	 *  @param xpath元素
	 * */
	public void changeFrame(String elementName) {
		try {
			for (Field f : methods) {
				if (f.get(methods).equals(elementName)) {log.info("    " + f.getName());break;}
			}
			dr.switchTo().frame(dr.findElementByXPath(elementName));
		} catch (Exception e) {
			log.error("Not find!!!  " +elementName+ "\r\n" + e);
			Assert.fail();
		}
	}
	
	/**
	 * 选取原来的句柄，回到原来页面 
	 * @param window 窗口ID
	 * */
	public void changeWindow(String window) {
		try {
			log.info("Change Window:"+window);
			this.waitTime(500);
			dr.switchTo().window(window);
		} catch (Exception e) {
			log.error("Change Window:"+e);
		}
	
	}
	
	/**
	 * 点击弹出框的确定按钮 
	 */
	public void alertSubmit() {
		log.info("Alert Submit");
		this.waitTime(2000);
		try {
			dr.switchTo().alert().accept();
		} catch (Exception e) {
			log.info("Alert not Find: "+e);
		}
	}
	
	/**
	 * 获取xpath的元素对象
	 * @param xpath元素
	 * */
	public WebElement getElement(String eleName) throws Exception {
		return dr.findElementByXPath(eleName);
	}
	
	/**
	 * 获取当前页面句柄
//	 * */
//	public String getWindowHandle() {
//		return dr.getWindowHandle();
//	}
	
	/**
	 * 切换到默认的Frame
	 */
	public void DefaultFrame() {
		try {
			log.debug("切换到默认的Frame");
			dr.switchTo().defaultContent();
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
	}
	/**
	 * 转到对应的页面
	 * */
	public void navigateToPage(String url) {
		log.debug("转到页面："+url);
		try {
			dr.navigate().to(url);
		} catch (Exception e) {
			log.error("转到页面失败："+e);
		}
	}
	
	/**
	 * 刷新页面
	 * */
	public void refreshPage() {
		try {
			dr.navigate().refresh();
		} catch (Exception e) {
			log.error("刷新页面失败："+e);
		}
	}
	
	/**
	 * 获取页面元素的文本
	 * 
	 */
	public String getText(String element) {
		String tmp = "";
		 try {
			tmp = dr.findElementByXPath(element).getText();
			log.debug("get element's text: "+tmp);
		} catch (Exception e) {
			log.error("failed to get element's text"+"\r\n"+e);
		}
		return tmp;
	}
	
	/**
	 * 点击页面上对应文本的下拉选择框
	 * @param eleName 页面上下拉框的xpath元素
	 * @param text 下拉框对应的文本
	 * 
	 * */
	
	public void select(String eleName,String text) {
		log.info("Select :" + text);
		try {
			Select s = new Select(dr.findElement(By.xpath(eleName)));
			s.selectByVisibleText(text);
		} catch (Exception e) {
			log.error("Select :" + text+"\r\n"+e);
		}
		
	}
	
	/**
	 * 点击页面上对应文本的下拉选择框
	 * @param eleName 页面上下拉框的xpath元素
	 * @param index 下拉框对应的文本的序号
	 * 
	 * */
	
	public void select(String eleName,int index) {
		log.info("Select :" + index);
		try {
			Select s = new Select(dr.findElement(By.xpath(eleName)));
			s.selectByIndex(index);
		} catch (Exception e) {
			log.error("Select :" + index+"\r\n"+e);
		}
		
	}
	
	/**
	 *  返回到上一页
	 * 
	 * */
	public void backToPrePage() {
		dr.navigate().back();
	
	}
	
	/**
	 * 
	 *  关闭浏览器
	 */
	public void close() {
		log.info(" Closing Driver");
		try {
			dr.close();
		} catch (Exception e) {
			log.error("Close:"+e);
		}
	}
	
	/**
	 * 对时间控件赋值
	 * 
	 * */
	public void enableTime(String startId, String endId, String startTime, String endTime) throws Exception {
		
		String js="document.getElementById('"+startId+"').removeAttribute('readonly');";
	    ((JavascriptExecutor)dr).executeScript(js);
	    String js2="document.getElementById('"+endId+"').removeAttribute('readonly');";
	    ((JavascriptExecutor)dr).executeScript(js2);
	    this.waitTime(500);
	    dr.findElementById(startId).sendKeys(startTime);
	    dr.findElementById(endId).sendKeys(endTime);
	    
	}
	
	/**
	 * 获取当前页面句柄
	 * */
	public String getWindowHandle(){
		return dr.getWindowHandle();
	}
	
	/**
	 * 选取原来的句柄，回到原来页面 
	 * @param window 窗口ID
	 * */
	public void backToPage(String window) {
		try {
			log.info("Change Window:"+window);
			this.waitTime(500);
			dr.switchTo().window(window);
		} catch (Exception e) {
			log.error("Change Window:"+e);
		}
	
	}
	 
	 /**
	  *  获取表的行数
	  *  @return 行数
	  * */
	 public int getRowCount(String rowXpath) {
		    List<WebElement> list = null;
			try {
				this.waitTime(1000);
				list = dr.findElements(By.xpath(rowXpath));
			} catch (Exception e) {
				log.error("Cannot get the rowCount"+"\r\n"+e);
			}
			return list.size();
			
		}
	 
	
	 /**
	  *  获取表指定行列的文本
	  *  @return 文本
	  * */
	 public String getCellText(String trXpath,int rowIdx, int colIdx) {
		 WebElement td = null;
		try {
			List<WebElement> rows = dr.findElements(By.xpath(trXpath));
			WebElement row = rows.get(rowIdx);
			List<WebElement> col = row.findElements(By.tagName("td"));
			td = col.get(colIdx);
		} catch (Exception e) {
			log.error("\r\n"+e);
		}
		 return td.getText();
	 }
	 
	 /**
	  *  获取指定行的文本
	  * 
	  * */
	 public String getRowText(String trXpath,int rowIdx) {
		 HashMap<Integer, WebElement> hMap = null;
		 try {
			//this.waitTime(500);
			List<WebElement> rows = dr.findElements(By.xpath(trXpath));
			WebElement row = rows.get(rowIdx);
			hMap = new HashMap<Integer, WebElement>();
			hMap.put(rowIdx, row);
		} catch (Exception e) {
			log.error("\r\n"+e);
		}
		return hMap.get(rowIdx).getText();
	 }
	
	/**
	 *  获取指定行的元素对象
	 *  @param Xpath
	 *  @param 行序号
	 *  @return 元素对象
	 * */ 
	 public WebElement getEle(String trXpath,int rowIdx) {
		 WebElement row = null;
		try {
			//this.waitTime(1000);
			List<WebElement> rows = dr.findElements(By.xpath(trXpath));
			row = rows.get(rowIdx);
		} catch (Exception e) {
			log.error("Cannot get WebElment"+"\r\n"+e);
		}
		 return row;
	 }
	
	 

	 /**
	  * 点击指定文本的元素
	  * @param xPath
	  * @param 元素文本
	  * @return 执行次数
	  * */
	public void clickByText(String xPath, String eleText) {
		log.info("Page's WebElement: " + eleText);
		int count = this.getRowCount(xPath);
		try {
			for (int i = 0; i < count; i++) {
				if (getEle(xPath, i).getText().equals(eleText)) {
					getEle(xPath, i).click();
					break;
				}
			}
		} catch (Exception e) {
			log.error("\r\n" + e);
		}
		
	}
	
	/**
	 *  点击指定序号的元素
	 *  @param xPath
	 *  @param 元素序号
	 * 
	 * */
	public void clickByIndex(String xPath,int index) {
		log.info("WebElement: " + xPath);
		 int count = this.getRowCount(xPath);
		 if(index < 0 || index > count) {
			log.error("The index is error"); 
		 }
		 else {
			 try {
				 getEle(xPath,index).click();
			} catch (Exception e) {
				log.error("\r\n" + e);
			}
		 }
	}
	

	
	
	
		
}
